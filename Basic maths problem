basic maths
extract all digit:
while n<0: n%10 = last digit. n/10 = remove last.
TC: log10(N) as n/10
if n/2 then TC log2(N) likewise

reverse no:
re = (re*10) + (n%10)
n = n/10

no of digits in int:
M1: while n>0 count ++ n/10.
M2: int (log10(n)+1). if n=7777, log10(n) = 3.8, int(3.8+1) = 4

palindrom or not:

M1: use forloop, compare the first element and last element, so on
if matched then go for next element else return false.
TC: N
M2: MALAYALAM
MOOM
N = no elements is odd.
n/2 = 4 (index)
a[4+1]==a[4-1]
N = of elements is even
n/2 = 2
a[2] = a[2-1]
a[2+1] = a[2-2]
M3: reverse and compare


Armstrong number:
371 = 3^3 + 7^3+ 1^3 = 371
1634 = 1^3 + 6^3 + 3^3 + 4^4 = 1634

M1: 
do digit extraction 
1*1*1 + 7*7*7 + 3*3*3 = original

Print all divisors of N
n= 10
2,5,10.

so 0 to N numbers can divide N, divisor can't be greater than N
use 10% (0to 10) == 0 then its a divisor

Tc: O(N)

M2: 

1 * 36
2 * 18
3 * 12
4 * 9
6 * 6
------
9 * 4
12 * 3
18 * 2
36 * 1

so 1,2,3,4,6 and other operands are the answer
root of 36 = 6
so run the loop till 6
other half will be N/1, N/2, N/3

for(;sqrt(N);)
	if(n%i==0)
		print i
		if(i != n/i)
			print n/i


Note: write down, find the pattern then code.
TC: O(sqrt N)
to print in order: use list to store dynamic length and sort

Prime:
B-F: loop, N%(2 to N-1) ==  0 then not a prime.
M1: use above method. if == 0 happens then return false. else atlast
return true

HCF/GCD:

GCD(9,12) = 3
fac 9 = 1,3,9
fac 12 = 1,2,3,4,6,12
common = 1,3
greater = 3

GDC (20,40) = 20
GDC( 1,9) = 1

M1: use sqrt(minimum(n1,n2)) as above
<because GDC(20,40) can't be more than 20>
M2: 
GCD = 1, Loop  n1%i == 0 and n2%i ==0 where i is 1 to  minimum(n1,n2) , GCD = GCD <i? i: GDC;

M3: best case 20,40. worst case (9,13)
	for(i = min(n1,n2); i>=1; i--) 
// we are starting from greatest divisor to small and find common
 n1%i == 0 and n2%i ==0 
	GCD = i
	break
M4: euclidean algo

gcd(a,b) = gcd(a-b, b)	where a>b
gcd(20,15) = gcd(5,15)
gcd(15,5) = gcd (10,5)
gcd(10,5) = gcd( 5,5)
gcd(5,5) = gcd(0,5)
5 is the gcd of 20,15

GCD(52,10) using Euclidean algo will take more then min(52,10) steps.
when you write down this gcd(a,b) = gcd(a%b,b) a>b
when one of them is 0 then other is GCD


while(a>0 and b>0)
	if a>b then a=a%b
	if b>b then b=b%a;
if a ==0 then b is GCD
if b==0 then b is GCD

TC: P(log pie (a,b)) - because we use %. like /2 means log2


Factorial:
Hashing:
TC: 10^8 is 1 sec

then
recurrsion



]]]]]]]]]]]]

Java 8
Character.isAlphabetic()

public static void main(String[] args) throws Exception {
        // Write your code here
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String input = br.readLine();
        char inc = input.charAt(0);
        if (Character.isAlphabetic(inc)){
            if(inc >= 'A' && inc <= 'Z'){
                System.out.println("1");
            }
            else{
                System.out.println("0");
            }
        }
        else{
            System.out.println("-1");
        }
    }
}
